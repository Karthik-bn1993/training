name: Terraform
 
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]
 
permissions:
  id-token: write
  pull-requests: write
  contents: write
 
jobs:
  terraform:
    name: Terraform Tasks
 
    runs-on: ubuntu-latest
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GithubActionsTerraform
 
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          terraform_version: ">= 1.11.4"
 
      # TFlint Integration
      - name: Install TFlint
        run: |
          wget https://github.com/terraform-linters/tflint/releases/download/v0.50.2/tflint_linux_amd64.zip # Replace with the latest TFlint version
          unzip tflint_linux_amd64.zip
          sudo mv tflint /usr/local/bin/
          tflint --version
 
      - name: Run TFlint
        id: tflint
        run: tflint --init && tflint -f compact
        working-directory: ./
 
      # Checkov Integration
      - name: Install Checkov
        run: |
          pip3 install --upgrade pip
          pip3 install checkov
      - name: Run Checkov
        id: checkov
        run: checkov -d . --framework terraform --soft-fail
        working-directory: ./
 
      # Terraform Steps
      - name: Initialize Terraform
        id: init
        run: terraform init -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" -backend-config="key=terraform.tfstate" -backend-config="region=${{ secrets.AWS_REGION }}"
        working-directory: ./
 
      - name: Validate Terraform
        id: fmt_and_validate
        run: terraform fmt && terraform validate
        working-directory: ./
 
 
      - name: Run Terraform Plan and Save Output
        run: terraform plan -no-color > plan.txt
        working-directory: ./

      - name: Generate Terraform docs and Save to README.md
        uses: terraform-docs/gh-actions@v1.1.0
        with: 
          config-file: .terraform-docs.yml
          output-file: README.md
          output-method: inject

      - name: Append Terraform Plan to README.md
        id: plan
        run: |
          cat plan.txt >> README.md
        working-directory: ./  
        
      - name: Commit and push the report
        run: |
          git config --global user.name "karthik-bn1993"
          git config --global user.email "karthik.neelakanta1993@gmail.com"
          git add reports/plan.txt
          git commit -m "Add deployment report"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: ./
 
      - name: Comment Plan to Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('./plan.txt', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.event.pull_request.number,
              body: planOutput
            });
 
      - name: Apply Terraform
        id: apply
        run: |
           export TF_LOG="ERROR"
           terraform apply -auto-approve -lock=false -var-file="terraform.tfvars"
        working-directory: ./
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
 
      - name: Upload Terraform Logs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-logs
          path: plan.txt
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
 
      #- name: Terraform Destroy
        #id: destroy
        #run: terraform destroy -auto-approve -lock=false -var-file="terraform.tfvars"
